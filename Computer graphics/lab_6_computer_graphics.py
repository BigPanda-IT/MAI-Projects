# -*- coding: utf-8 -*-
"""Lab 6 Computer graphics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AX0GK5PkzjFMiGsCGRps-Z_7kb_MRytn
"""

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import numpy as np
from math import *

# Constants for the paraboloid
a = 0.5
b = 0.5
c = 1.0

dots = int(input("Please, input amount of dots for approximation: "))

global xrot         # Величина вращения по оси x
global zrot         # Величина вращения по оси z
global ambient      # Рассеянное освещение
global lightpos     # Положение источника освещения
global scale

scale = 75

def picture():
    global scale

    for i in np.linspace(-scale, scale, dots):
        # glBegin(GL_LINE_STRIP)
        glBegin(GL_LINES)
        for j in np.linspace(-scale, scale, dots):
            x = a * i / 50
            y = b * j / 50
            z = c * (x**2 + y**2)
            glColor3f(1.0, 0.0, 0.0)
            glVertex3f(x, y, z)
        glEnd()

# Function to draw the paraboloid
def draw_paraboloid():
    global xrot
    global zrot
    global lightpos

    print("draw_parabaloid invoked")

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    glPushMatrix()
    gluLookAt(0, 0, 5, 0, 0, 0, 0, 1, 0)
    glRotatef(xrot, 1.0, 0.0, 0.0)                              # Вращаем по оси X на величину xrot
    glRotatef(zrot, 0.0, 1.0, 0.0)
    glLightfv(GL_LIGHT0, GL_POSITION, lightpos)                 # Источник света вращаем вместе с елкой

    picture()

    glPopMatrix()
    glutSwapBuffers()

# Function to handle window resizing
def reshape(width, height):
    glViewport(0, 0, width, height)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(45, float(width) / height, 0.1, 100)
    glMatrixMode(GL_MODELVIEW)

# Function to initialize OpenGL
def init():

    global xrot         # Величина вращения по оси x
    global zrot         # Величина вращения по оси z
    global ambient      # Рассеянное освещение
    global lightpos     # Положение источника освещения

    xrot = 0.0                          # Величина вращения по оси x = 0
    zrot = 0.0                          # Величина вращения по оси z = 0
    ambient = (1.0, 1.0, 1.0, 1)        # Первые три числа - цвет в формате RGB, а последнее - яркость
    greencolor = (0.2, 0.8, 0.0, 0.8)   # Зеленый цвет для иголок
    treecolor = (0.9, 0.6, 0.3, 0.8)    # Коричневый цвет для ствола
    lightpos = (1.0, 1.0, 1.0)          # Положение источника освещения по осям xyz

    gluOrtho2D(-1.0, 1.0, -1.0, 1.0)                # Определяем границы рисования по горизонтали и вертикали
    glRotatef(30, 1, 0, 0)
    glRotatef(30, 0, 1, 0)
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambient) #Определяем текущую модель освещения
    glEnable(GL_DEPTH_TEST)
    glClearColor(0.5, 0.0, 0.5, 1.0)                # Серый цвет для первоначальной закраски
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0)                # Определяем границы рисования по горизонтали и вертикали
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambient) # Определяем текущую модель освещения
    glEnable(GL_LIGHTING)                           # Включаем освещение
    glEnable(GL_LIGHT0)                             # Включаем один источник света
    glLightfv(GL_LIGHT0, GL_POSITION, lightpos)     # Определяем положение источника света

speeds = np.linspace(0, 2 * pi, 100)
global sinusoida
global index
index = 0
index_step = 1
sinusoida = np.sin(speeds)

# Процедура обработки специальных клавиш
def specialkeys(key, x, y):
    global xrot
    global scale
    global zrot
    global index
    global index_step

    # Обработчики для клавиш со стрелками
    if key == GLUT_KEY_UP:      # Клавиша вверх
        xrot -= 4.0             # Уменьшаем угол вращения по оси X
    if key == GLUT_KEY_DOWN:    # Клавиша вниз
        xrot += 4.0             # Увеличиваем угол вращения по оси X
    if key == GLUT_KEY_LEFT:    # Клавиша влево
        zrot -= 4.0             # Уменьшаем угол вращения по оси Z
    if key == GLUT_KEY_RIGHT:   # Клавиша вправо
        zrot += 20.0 * sinusoida[index]
        if index==len(sinusoida) - 1 or index < 0:
            index_step = -index_step
        index += index_step
    glutPostRedisplay()         # Вызываем процедуру перерисовки

glutInit()
glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH)
glutInitWindowSize(800, 600)
glutCreateWindow(b"3D Paraboloid")
glutDisplayFunc(draw_paraboloid)
glutReshapeFunc(reshape)
glutSpecialFunc(specialkeys)
init()
glutMainLoop()